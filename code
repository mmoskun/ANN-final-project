from keras.preprocessing import sequence
from keras.models import Sequential
from keras.layers import Dense, Embedding
from keras.layers import LSTM
from keras.datasets import imdb
import numpy as np
    
    
# number of chords used.
# key: # 1=am7, 2=f, 3=c, 4=e7, 5=d, 6=g, 7=em, 8=a,9=c#, 10=d#m, 11=f#, 12=a#m, 13=fm, 14=d#, 15=g#
total_chords = 15
# x training data
x=[[[1], [2], [3], [4], [1], [2], [3], [4], [2]], #between the bars, sad
   [[5], [6], [7], [8], [7], [6], [7], [8], [5]], #lua, sad
   [[9], [10], [11], [9], [10], [11], [12], [13], [11]], #jackie and wilson, happy 
   [[3],[7],[1],[6],[3],[7],[1],[6],[2]], #fix you, sad
   [[6],[5],[6],[6],[5],[6],[3],[6],[3]], # im a believer, happy
   [[8],[6],[5],[8],[6],[5],[8],[6],[5]],# apunk, happy
   [[14],[9],[12],[15],[14],[9],[12],[15],[14]], #casimir pulaski, sad
   [[6],[3],[6],[3],[7],[8],[3],[6],[3]], #accidentally in love, happy
   [[5],[8],[7],[6],[8],[5],[8],[7],[6]],#come on eileen,happy
   [[11],[3],[4],[1],[2],[3],[6],[3],[3]], #be my mistake, sad
   [[1],[2],[3],[1],[2],[3],[1],[2],[3]], #happier, sad
   [[5],[7],[6],[8],[5],[7],[6],[8],[5]], #our song, happy
   [[9],[13],[12],[15],[11],[12],[10],[15],[9]], #liability, sad
   [[5],[3],[2],[6],[5],[3],[2],[6],[6]] #love me do, happy
  ]
  
x=np.array(x, dtype=np.float32)

# y training data
# sad = 1, happy = 2
y= np.array([1,1,2,1,2,2,1,2,2,1,1,2,1,2], dtype=np.int32) 

#convert to dummy variables
y2 = np.zeros((y.shape[0], total_chords), dtype=np.int32)
y2[np.arange(y.shape[0]), y] = 1.0

model = Sequential()
model.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2, input_dim=1))
model.add(Dense(15, activation='sigmoid'))
model.compile(loss='binary_crossentropy',
             optimizer='adam',
             metrics = ['accuracy'])
model.fit(x, y2, epochs=200)
pred= model.predict(x)
predict_classes = np.argmax(pred,axis=1)
print("Predicted classes", predict_classes)

# Function to classify songs as happy or sad
# takes song name and array of 9 chords (represented by their corresponding integer) as input
def testSong(songName, chords):
    newsong = []
    for i in chords:
        newsong = newsong+[[i]]
    newsong = [newsong]
    newsong=np.array(newsong, dtype=np.float32)
    newsong=model.predict(newsong)
    newsong=np.argmax(newsong,axis=1)
    if newsong==1:
        feeling = 'sad'
    else:
        feeling = 'happy'
    print(songName, "is", feeling)


testSong('electric love', [6, 3, 5, 7, 3, 5, 6, 7, 6])
testSong('paper rings', [5, 6, 8, 5, 6, 8, 5, 5, 8])
testSong('mess is mine', [7,3,6,7,3,6,7,3,6])
testSong('random chords', [7,9,1,11,1,9,8,7,8])
